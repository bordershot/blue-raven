# Read an XML file generated by the Rainforest RAVEN and analyze the intervals
# between InstantaneousDemand reports.
#
# Synopsis:
#   $ ruby ./analyze_instantaneous_demand.rb <filename>.xml 
# In particular, try the following:
#   $ ruby ./analyze_instantaneous_demand.rb /tmp/cwz0.xml 
#   $ ruby ./analyze_instantaneous_demand.rb /tmp/cwz1.xml 
# to analyze the output of the coex_wifi_zigbee.sh script
#
# It computes the time deltas between InstantaneousDemand readings and then
# prints the results as a statistical summary and as a histogram.

require 'nokogiri'
require './statistics.rb'

class Analyzer

  def analyze(filename)
    doc = Nokogiri::XML::DocumentFragment.parse(File.read(filename))
    analyze_doc(doc)
  end

  def analyze_doc(doc)
    nodeset = doc.css('InstantaneousDemand//TimeStamp')
    prepare_analysis
    nodeset.each do |node|
      timestamp = Integer(node.text)
      record_timestamp(timestamp)
    end
    complete_analysis
  end

  def prepare_analysis
    @prev_timestamp = nil
    @deltas = []
    @histogram = Hash.new()
  end

  def record_timestamp(timestamp)
    if @prev_timestamp
      delta = timestamp - @prev_timestamp
      @deltas.push(delta)
      if @histogram.has_key?(delta)
        @histogram[delta] += 1
      else
        @histogram[delta] = 1
      end
    end
    @prev_timestamp = timestamp
  end

  def complete_analysis
    puts("==== statistical summary:")
    print_stats(@deltas)
    puts("==== histogram:")
    print_histogram(@histogram)
  end

  def print_stats(values)
    summary = Utilities::Statistics.summarize(values, false);
    summary.each_pair { |k, v| puts("#{k}: #{v}") }
  end

  def print_histogram(histogram)
    deltas = @histogram.keys.sort
    puts("delta(t), count")
    deltas.each do |k|
      puts("#{k}, #{histogram[k]}")
    end
  end

end

if $0 == __FILE__

  if ARGV.size != 1 
    printf("usage: #{$0} file\n")
    exit
  end

  Analyzer.new().analyze(ARGV[0])
end
